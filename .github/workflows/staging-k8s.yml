name: Staging k8s deployment

on:
    workflow_dispatch:
    push:
        branches:
            - main

env:
    TAG: ${{ github.sha }}
    PUBLIC_APPWRITE_ENDPOINT: ${{ vars.PUBLIC_APPWRITE_ENDPOINT }}
    PUBLIC_APPWRITE_DASHBOARD: ${{ vars.PUBLIC_APPWRITE_DASHBOARD }}
    PUBLIC_APPWRITE_PROJECT_ID: ${{ vars.PUBLIC_APPWRITE_PROJECT_ID }}
    PUBLIC_APPWRITE_DB_MAIN_ID: ${{ vars.PUBLIC_APPWRITE_DB_MAIN_ID }}
    PUBLIC_APPWRITE_COL_THREADS_ID: ${{ vars.PUBLIC_APPWRITE_COL_THREADS_ID }}
    PUBLIC_APPWRITE_COL_MESSAGES_ID: ${{ vars.PUBLIC_APPWRITE_COL_MESSAGES_ID }}
    PUBLIC_APPWRITE_FN_TLDR_ID: ${{ vars.PUBLIC_APPWRITE_FN_TLDR_ID }}
    PUBLIC_APPWRITE_PROJECT_INIT_ID: ${{ vars.PUBLIC_APPWRITE_PROJECT_INIT_ID }}
    PUBLIC_GROWTH_ENDPOINT: ${{ vars.PUBLIC_GROWTH_ENDPOINT }}
    PUBLIC_POSTHOG_API_KEY: ${{ vars.PUBLIC_POSTHOG_API_KEY }}
    APPWRITE_DB_INIT_ID: ${{ secrets.APPWRITE_DB_INIT_ID }}
    APPWRITE_COL_INIT_ID: ${{ secrets.APPWRITE_COL_INIT_ID }}
    APPWRITE_API_KEY_INIT: ${{ secrets.APPWRITE_API_KEY_INIT }}
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        steps:
            - name: Checkout the repo
              uses: actions/checkout@v4

            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  tags: ghcr.io/appwrite/website:${{ env.TAG }}
                  build-args: |
                      "PUBLIC_APPWRITE_ENDPOINT=${{ env.PUBLIC_APPWRITE_ENDPOINT }}"
                      "PUBLIC_APPWRITE_DASHBOARD=${{ env.PUBLIC_APPWRITE_DASHBOARD }}"
                      "PUBLIC_APPWRITE_PROJECT_ID=${{ env.PUBLIC_APPWRITE_PROJECT_ID }}"
                      "PUBLIC_APPWRITE_DB_MAIN_ID=${{ env.PUBLIC_APPWRITE_DB_MAIN_ID }}"
                      "PUBLIC_APPWRITE_COL_THREADS_ID=${{ env.PUBLIC_APPWRITE_COL_THREADS_ID }}"
                      "PUBLIC_APPWRITE_COL_MESSAGES_ID=${{ env.PUBLIC_APPWRITE_COL_MESSAGES_ID }}"
                      "PUBLIC_APPWRITE_FN_TLDR_ID=${{ env.PUBLIC_APPWRITE_FN_TLDR_ID }}"
                      "PUBLIC_APPWRITE_PROJECT_INIT_ID=${{ env.PUBLIC_APPWRITE_PROJECT_INIT_ID }}"
                      "PUBLIC_GROWTH_ENDPOINT=${{ env.PUBLIC_GROWTH_ENDPOINT }}"
                      "PUBLIC_POSTHOG_API_KEY=${{ env.PUBLIC_POSTHOG_API_KEY }}"
                      "APPWRITE_DB_INIT_ID=${{ env.APPWRITE_DB_INIT_ID }}"
                      "APPWRITE_COL_INIT_ID=${{ env.APPWRITE_COL_INIT_ID }}"
                      "APPWRITE_API_KEY_INIT=${{ env.APPWRITE_API_KEY_INIT }}"
                      "GITHUB_TOKEN=${{ env.GITHUB_TOKEN }}"
                      "SENTRY_AUTH_TOKEN=${{ env.SENTRY_AUTH_TOKEN }}"

    deploy:
        strategy:
            matrix:
                region: [{ full: fra1, short: fra }]
        needs: build
        runs-on: cloud-fra1-jumpbox
        steps:
            - name: Checkout the repo
              uses: actions/checkout@v4
            - name: Install Kubectl
              uses: azure/setup-kubectl@v4
            - name: Install Helm
              uses: azure/setup-helm@v4
            - name: Install doctl
              uses: digitalocean/action-doctl@v2
              with:
                  token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            - name: Save DigitalOcean kubeconfig with short-lived credentials
              run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 do-${{ matrix.region.full }}-assets-${{ matrix.region.full }}-stg

            - name: Create docker pull secret
              run: |
                  kubectl -n website create secret docker-registry ghcr \
                    --docker-server=ghcr.io \
                    --docker-username=${{ github.actor }} \
                    --docker-password=${{ secrets.GITHUB_TOKEN }} \
                    --docker-email=ci@appwrite.io \
                    --dry-run=client -o yaml | kubectl apply -f -

            # - name: Create telemetry
            #   run: |
            #       echo "TODO(mustaq): To be added!!!"

            # - name: Deploy telemetry
            #   run: helm upgrade --install --namespace telemetry --repo https://grafana.github.io/helm-charts alloy alloy --values deploy/telemetry/values.yaml --set-file alloy.configMap.content=deploy/telemetry/config.alloy

            - name: Deploy
              run: |
                  helm upgrade --install --wait --namespace website website deploy/ \
                    --values deploy/environments/staging/${{ matrix.region.full }}.values.yaml \
                    --set imagePullSecret='ghcr' \
                    --set version=${{ env.TAG }} \
                    --set region=${{ matrix.region.full }} \
                    --set env.PUBLIC_APPWRITE_PROJECT_INIT_ID='${{ env.PUBLIC_APPWRITE_PROJECT_INIT_ID }}' \
                    --set env.PUBLIC_APPWRITE_PROJECT_ID='${{ env.PUBLIC_APPWRITE_PROJECT_ID }}' \
                    --set env.PUBLIC_APPWRITE_DB_MAIN_ID='${{ env.PUBLIC_APPWRITE_DB_MAIN_ID }}' \
                    --set env.PUBLIC_APPWRITE_COL_THREADS_ID='${{ env.PUBLIC_APPWRITE_COL_THREADS_ID }}' \
                    --set env.PUBLIC_APPWRITE_COL_MESSAGES_ID='${{ env.PUBLIC_APPWRITE_COL_MESSAGES_ID }}' \
                    --set env.PUBLIC_APPWRITE_FN_TLDR_ID='${{ env.PUBLIC_APPWRITE_FN_TLDR_ID }}' \
                    --set env.PUBLIC_APPWRITE_ENDPOINT='${{ env.PUBLIC_APPWRITE_ENDPOINT }}' \
                    --set env.PUBLIC_APPWRITE_DASHBOARD='${{ env.PUBLIC_APPWRITE_DASHBOARD }}' \
                    --set env.PUBLIC_GROWTH_ENDPOINT='${{ env.PUBLIC_GROWTH_ENDPOINT }}' \
                    --set env.PUBLIC_POSTHOG_API_KEY='${{ env.PUBLIC_POSTHOG_API_KEY }}' \
                    --set env.APPWRITE_DB_INIT_ID='${{ env.APPWRITE_DB_INIT_ID }}' \
                    --set env.APPWRITE_COL_INIT_ID='${{ env.APPWRITE_COL_INIT_ID }}' \
                    --set env.APPWRITE_API_KEY_INIT='${{ env.APPWRITE_API_KEY_INIT }}' \
                    --set env.SENTRY_AUTH_TOKEN='${{ env.SENTRY_AUTH_TOKEN }}'
