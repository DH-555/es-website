---
layout: post
title: "Announcing Database Upsert: Built-in encryption for sensitive fields"
description: Easily encrypt sensitive string fields at rest, with no manual encryption logic.
date: 2025-07-07
cover: /images/blog/announcing-database-upsert/cover.png
timeToRead: 5
author: jake-barnby
category: announcement
featured: false
---

Managing database operations efficiently is crucial for modern application development, where speed and simplicity directly impact productivity. 

Therefore, we are introducing Appwrite's latest database enhancement: **Database Upsert.** 

Built to optimize the traditional CRUD workflow, Database Upsert effortlessly combines record creation and updating into a single, streamlined action. This new feature significantly reduces the complexity of database interactions, empowering developers to write cleaner code, reduce redundancy, and accelerate application development.

# Eliminate redundant checks

Previously, managing documents involved multiple API calls and client-side logic, checking if data existed, handling 404s, and deciding between POST, PUT, or PATCH operations. This process added latency and complexity and introduced potential race conditions.

With Database Upsert, the server intelligently manages this logic. It automatically creates a document if it doesnâ€™t exist or updates it if it does, eliminating the need for manual checks.

# Ideal for multi-client scenarios

Whether you synchronize mobile data, handle background worker processes, or collect data from IoT devices, Database Upsert ensures data consistency. Its fully atomic nature prevents race conditions, keeping your data accurate and consistent, no matter how many clients interact simultaneously.

Immediate benefits:

- **Fewer network calls**: Combine GET, POST, and PATCH into a single, efficient API request.
- **Race-free writes**: Ensure atomic operations that prevent conflicts.
- **Cleaner, simpler code**: Reduce branching logic and improve readability.
- **Idempotency**: Safe and easy retries ensure consistent behaviour.

# How it works

Implementing Upsert is straightforward and intuitive:

```
import { Client, Databases, ID } from "appwrite";

const client = new Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const databases = new Databases(client);

const result = await databases.upsertDocument(
    '<DATABASE_ID>',
    '<COLLECTION_ID>',
    ID.unique(),
    {
	    'name': 'Document 1',
	    'description': 'Description 1'
    }
);
```

Database Upsert was developed to enhance developer productivity and satisfaction, providing a feature that matches or surpasses competitive solutions. Whether using Appwrite Cloud or a self-hosted setup, Database Upsert integrates smoothly into your development workflow.

This feature simplifies your database interactions, enhancing efficiency, reducing complexity, and empowering you to build faster.

# More resources

- [Read the documentation to get started](https://appwrite.io/docs/products/databases/documents)
- Announcing Bulk API: Handle heavy data workloads with ease
- Build a personal CRM with SvelteKit and Appwrite Databases
- Announcing: Document imports from CSV files
