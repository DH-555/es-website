---
layout: article
title: AWS deployment
description: Deploy Appwrite on Amazon Web Services using ECS, EC2, or Lightsail. Learn how to set up a production-ready Appwrite instance on AWS with best practices.
---

Amazon Web Services (AWS) offers multiple ways to deploy Appwrite, from simple single-instance deployments to highly scalable, production-ready architectures. This guide covers the most common deployment scenarios.

# Deployment options {% #deployment-options %}

AWS provides several services suitable for hosting Appwrite:

{% table %}
* Service
* Best for
* Complexity
* Scaling
---
* **EC2**
* Full control, custom configurations
* Medium
* Manual
---
* **ECS Fargate**
* Serverless containers, managed infrastructure
* Medium
* Automatic
---
* **Lightsail**
* Simple deployments, predictable pricing
* Low
* Limited
---
* **ECS on EC2**
* Cost optimization, custom instance types
* High
* Configurable
{% /table %}

# EC2 deployment {% #ec2-deployment %}

Deploy Appwrite on a single EC2 instance for development or small production workloads.

## Prerequisites {% #ec2-prerequisites %}

- AWS account with appropriate permissions
- EC2 key pair for SSH access
- Basic knowledge of AWS security groups

## Launch EC2 instance {% #launch-instance %}

**Step 1: Create instance**

1. Navigate to EC2 Console in your preferred AWS region
2. Click **Launch Instance**
3. Choose **Ubuntu Server 22.04 LTS** as your AMI
4. Select instance type (minimum `t3.medium` recommended)
5. Configure security group with these rules:

{% table %}
* Protocol
* Port Range
* Source
* Description
---
* HTTP
* 80
* 0.0.0.0/0
* Web traffic
---
* HTTPS
* 443
* 0.0.0.0/0
* Secure web traffic
---
* SSH
* 22
* Your IP
* SSH access
---
* Custom TCP
* 8080
* 0.0.0.0/0
* Appwrite API (temporary)
{% /table %}

6. Select or create a key pair
7. Launch the instance

**Step 2: Connect and install Docker**

```bash
# Connect to your instance
ssh -i your-key.pem ubuntu@your-instance-ip

# Update the system
sudo apt update && sudo apt upgrade -y

# Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

# Add user to docker group
sudo usermod -aG docker ubuntu

# Install Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Logout and login again for group changes to take effect
exit
```

**Step 3: Install Appwrite**

```bash
# Reconnect to your instance
ssh -i your-key.pem ubuntu@your-instance-ip

# Create directory for Appwrite
mkdir appwrite && cd appwrite

# Install Appwrite
docker run -it --rm \
    --volume /var/run/docker.sock:/var/run/docker.sock \
    --volume "$(pwd)"/appwrite:/usr/src/code/appwrite:rw \
    --entrypoint="install" \
    appwrite/appwrite:1.7.4
```

Follow the installation prompts:
- **HTTP Port**: 80
- **HTTPS Port**: 443
- **Hostname**: Your domain or EC2 public DNS
- **Secret Key**: Generate a secure random key

## Configure domain and SSL {% #ec2-ssl %}

**Step 1: Set up domain (optional)**

If using a custom domain:
1. Point your domain's A record to your EC2 public IP
2. Update your security group to only allow HTTP/HTTPS traffic

**Step 2: Configure SSL with Let's Encrypt**

```bash
# Install Certbot
sudo apt install certbot python3-certbot-nginx

# Stop Appwrite temporarily
cd appwrite && docker compose stop

# Install Nginx
sudo apt install nginx

# Configure Nginx for Appwrite
sudo tee /etc/nginx/sites-available/appwrite << EOF
server {
    listen 80;
    server_name your-domain.com;

    location / {
        proxy_pass http://localhost:8080;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

# Enable the site
sudo ln -s /etc/nginx/sites-available/appwrite /etc/nginx/sites-enabled/
sudo nginx -t && sudo systemctl restart nginx

# Get SSL certificate
sudo certbot --nginx -d your-domain.com

# Start Appwrite
docker compose start
```

# ECS Fargate deployment {% #ecs-fargate %}

Deploy Appwrite using AWS ECS Fargate for a managed, serverless container experience.

## Prerequisites {% #ecs-prerequisites %}

- AWS CLI configured with appropriate permissions
- Docker image pushed to Amazon ECR
- VPC with public subnets

## Prepare container image {% #prepare-image %}

**Step 1: Create ECR repository**

```bash
# Create repository
aws ecr create-repository --repository-name appwrite

# Get login token
aws ecr get-login-password --region your-region | docker login --username AWS --password-stdin your-account-id.dkr.ecr.your-region.amazonaws.com

# Pull, tag, and push Appwrite image
docker pull appwrite/appwrite:1.7.4
docker tag appwrite/appwrite:1.7.4 your-account-id.dkr.ecr.your-region.amazonaws.com/appwrite:1.7.4
docker push your-account-id.dkr.ecr.your-region.amazonaws.com/appwrite:1.7.4
```

## Create ECS resources {% #create-ecs %}

**Step 1: Create task definition**

Create a file `appwrite-task.json`:

```json
{
  "family": "appwrite",
  "networkMode": "awsvpc",
  "requiresCompatibilities": ["FARGATE"],
  "cpu": "1024",
  "memory": "2048",
  "executionRoleArn": "arn:aws:iam::your-account:role/ecsTaskExecutionRole",
  "taskRoleArn": "arn:aws:iam::your-account:role/ecsTaskRole",
  "containerDefinitions": [
    {
      "name": "appwrite",
      "image": "your-account-id.dkr.ecr.your-region.amazonaws.com/appwrite:1.7.4",
      "portMappings": [
        {
          "containerPort": 80,
          "protocol": "tcp"
        }
      ],
      "environment": [
        {
          "name": "_APP_ENV",
          "value": "production"
        },
        {
          "name": "_APP_SYSTEM_SECURITY_EMAIL_ADDRESS",
          "value": "admin@your-domain.com"
        }
      ],
      "secrets": [
        {
          "name": "_APP_KEY",
          "valueFrom": "arn:aws:secretsmanager:your-region:your-account:secret:appwrite-key"
        }
      ],
      "logConfiguration": {
        "logDriver": "awslogs",
        "options": {
          "awslogs-group": "/ecs/appwrite",
          "awslogs-region": "your-region",
          "awslogs-stream-prefix": "ecs"
        }
      }
    }
  ]
}
```

**Step 2: Register task definition**

```bash
aws ecs register-task-definition --cli-input-json file://appwrite-task.json
```

**Step 3: Create ECS service**

```bash
# Create cluster
aws ecs create-cluster --cluster-name appwrite-cluster

# Create service
aws ecs create-service \
  --cluster appwrite-cluster \
  --service-name appwrite-service \
  --task-definition appwrite:1 \
  --desired-count 1 \
  --launch-type FARGATE \
  --network-configuration "awsvpcConfiguration={subnets=[subnet-12345],securityGroups=[sg-12345],assignPublicIp=ENABLED}"
```

# Lightsail deployment {% #lightsail %}

AWS Lightsail provides a simple way to deploy Appwrite with predictable pricing.

## Create Lightsail instance {% #lightsail-instance %}

**Step 1: Launch instance**

1. Navigate to [AWS Lightsail Console](https://lightsail.aws.amazon.com/)
2. Click **Create instance**
3. Choose **Linux/Unix** platform
4. Select **Ubuntu 22.04 LTS** blueprint
5. Choose instance plan (minimum $10/month recommended)
6. Name your instance and click **Create instance**

**Step 2: Configure networking**

1. Go to your instance's **Networking** tab
2. Add these firewall rules:

{% table %}
* Application
* Protocol
* Port Range
---
* HTTP
* TCP
* 80
---
* HTTPS
* TCP
* 443
---
* Custom
* TCP
* 8080
{% /table %}

**Step 3: Install Appwrite**

Connect via SSH from the Lightsail console and run:

```bash
# Update system
sudo apt update && sudo apt upgrade -y

# Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker ubuntu

# Install Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Restart session to apply group changes
exit
# Reconnect via SSH

# Install Appwrite
mkdir appwrite && cd appwrite
docker run -it --rm \
    --volume /var/run/docker.sock:/var/run/docker.sock \
    --volume "$(pwd)"/appwrite:/usr/src/code/appwrite:rw \
    --entrypoint="install" \
    appwrite/appwrite:1.7.4
```

# Production considerations {% #production %}

## Security best practices {% #security %}

**Environment Variables**
- Store sensitive data in AWS Secrets Manager
- Use IAM roles instead of access keys
- Enable CloudTrail for audit logging

**Network Security**
- Use Application Load Balancer with WAF
- Implement VPC with private subnets for databases
- Enable VPC Flow Logs for monitoring

**SSL/TLS Configuration**
```bash
# For production, use AWS Certificate Manager
aws acm request-certificate \
  --domain-name your-domain.com \
  --validation-method DNS
```

## Monitoring and backup {% #monitoring %}

**CloudWatch Monitoring**
- Enable Container Insights for ECS
- Set up CloudWatch alarms for CPU, memory, and disk usage
- Configure log retention policies

**Backup Strategy**
- Use RDS for managed database with automated backups
- Store file uploads in S3 with versioning enabled
- Schedule regular snapshots of EBS volumes

**Example CloudWatch alarm**
```bash
aws cloudwatch put-metric-alarm \
  --alarm-name "AppwriteHighCPU" \
  --alarm-description "Alarm when CPU exceeds 70%" \
  --metric-name CPUUtilization \
  --namespace AWS/ECS \
  --statistic Average \
  --period 300 \
  --threshold 70 \
  --comparison-operator GreaterThanThreshold \
  --evaluation-periods 2
```

## Scaling considerations {% #scaling %}

**Auto Scaling with ECS**
- Configure target tracking scaling policies
- Use Application Load Balancer for traffic distribution
- Implement health checks

**Database Scaling**
- Use Amazon RDS with read replicas
- Consider Amazon DocumentDB for document storage
- Implement Redis ElastiCache for session storage

# Troubleshooting {% #troubleshooting %}

**Common issues and solutions:**

**Instance not accessible**
- Check security group rules
- Verify Elastic IP assignment
- Confirm target group health in Load Balancer

**Container startup failures**
- Check CloudWatch logs
- Verify environment variables
- Ensure sufficient memory allocation

**Performance issues**
- Monitor CloudWatch metrics
- Check disk I/O and network throughput
- Consider upgrading instance type

# Next steps {% #next-steps %}

After successful deployment:

[Configure email delivery](/docs/advanced/self-hosting/configuration/email) - Set up SMTP for user notifications

[Set up SSL certificates](/docs/advanced/self-hosting/configuration/tls-certificates) - Secure your deployment with HTTPS

[Production deployment guide](/docs/advanced/self-hosting/production) - Optimize for production workloads

[Update and maintenance](/docs/advanced/self-hosting/update) - Keep your Appwrite instance up to date