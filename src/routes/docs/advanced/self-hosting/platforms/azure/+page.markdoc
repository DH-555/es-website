---
layout: article
title: Azure deployment
description: Deploy Appwrite on Microsoft Azure using Container Apps, Virtual Machines, or AKS. Learn how to set up a production-ready Appwrite instance with Azure's managed services.
---

Microsoft Azure provides multiple deployment options for Appwrite, from serverless containers with Azure Container Apps to fully managed Kubernetes with AKS. This guide covers the most effective Azure services for deploying Appwrite.

# Deployment options {% #deployment-options %}

Choose the Azure service that best fits your requirements:

{% table %}
* Service
* Best For
* Complexity
* Scaling
---
* **Container Apps**
* Serverless containers, microservices
* Low
* Automatic
---
* **Virtual Machines**
* Full control, custom configurations
* Medium
* Manual
---
* **AKS**
* Container orchestration, enterprise workloads
* High
* Automatic
---
* **App Service**
* Web apps, managed platform
* Low
* Automatic
{% /table %}

# Container Apps deployment {% #container-apps %}

Deploy Appwrite using Azure Container Apps for a serverless, fully managed container experience.

## Prerequisites {% #container-apps-prerequisites %}

- Azure account with active subscription
- Azure CLI installed and authenticated
- Docker installed locally
- Basic understanding of containerized applications

## Setup Azure resources {% #setup-resources %}

**Step 1: Install and configure Azure CLI**

1. **Install Azure CLI** for your operating system following the [official installation guide](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli)
2. **Authenticate with Azure** using your account credentials
3. **Set your default subscription** if you have multiple subscriptions

**Step 2: Create core Azure resources**

1. **Create a resource group** to organize all related resources
2. **Create an Azure Container Registry** to store your container images:
   - Choose the Basic SKU for development or Standard/Premium for production
   - Enable admin access for simplified authentication
3. **Authenticate Docker** with your container registry

## Prepare container image {% #prepare-image %}

**Step 1: Prepare the Appwrite image**

1. **Pull the official Appwrite image** (version 1.7.4 recommended)
2. **Tag the image** for your Azure Container Registry
3. **Push the image** to your registry

For current Azure Container Registry commands and procedures, refer to the [Azure Container Registry documentation](https://docs.microsoft.com/en-us/azure/container-registry/).

## Deploy to Container Apps {% #deploy-container-apps %}

**Step 1: Set up the Container Apps environment**

1. **Install the Container Apps extension** for Azure CLI
2. **Create a Container Apps environment** in your resource group
3. **Configure the environment** with appropriate settings for your region

**Step 2: Create managed database**

1. **Create an Azure Database for MySQL** flexible server:
   - Choose appropriate SKU based on your workload (Burstable for development)
   - Configure authentication and network access
   - Set up appropriate storage and backup settings
2. **Create the Appwrite database** within your MySQL server

**Step 3: Deploy the Appwrite container**

1. **Create the container app** with these specifications:
   - **Image**: Your tagged Appwrite image from the registry
   - **CPU and Memory**: 1.0 CPU, 2.0Gi memory minimum
   - **Scaling**: Configure min/max replicas based on your needs
   - **Ingress**: Enable external ingress on port 80

2. **Configure environment variables** for production:
   - `_APP_ENV=production`
   - Database connection settings
   - Security and feature flags as needed
   - Use Azure Key Vault for sensitive values

For current Container Apps deployment procedures, see the [Azure Container Apps documentation](https://docs.microsoft.com/en-us/azure/container-apps/).

## Configure custom domain {% #container-apps-domain %}

**Step 1: Add custom domain**

1. **Add your custom domain** to the container app
2. **Configure DNS verification** as required by Azure

**Step 2: Configure SSL certificates**

1. **Set up managed SSL certificates** through Azure
2. **Update DNS records** at your domain provider with the required CNAME records

SSL certificates are automatically managed by Azure Container Apps for custom domains.

# Virtual Machine deployment {% #virtual-machine %}

Deploy Appwrite on Azure Virtual Machines for maximum control and customization.

## Create VM instance {% #create-vm %}

**Step 1: Create and configure virtual machine**

1. **Create a virtual machine** with these specifications:
   - **Image**: Ubuntu 22.04 LTS
   - **Size**: Standard_B2s or larger recommended
   - **Authentication**: SSH key authentication
   - **Region**: Choose based on your target audience

2. **Configure cloud-init** to automatically install prerequisites:
   - Docker and Docker Compose
   - Nginx for reverse proxy
   - Certbot for SSL certificates
   - System updates and security packages

**Step 2: Configure network security**

1. **Configure Network Security Groups** to allow traffic on:
   - Port 22 (SSH)
   - Port 80 (HTTP)
   - Port 443 (HTTPS)
   - Port 8080 (Appwrite API, temporarily)

For current VM creation procedures, refer to the [Azure Virtual Machines documentation](https://docs.microsoft.com/en-us/azure/virtual-machines/).

## Install Appwrite on VM {% #install-vm %}

**Step 1: Connect to your VM**

1. **Obtain your VM's public IP address** from the Azure portal
2. **Connect via SSH** using your SSH key

**Step 2: Install Appwrite**

1. **Create a directory** for your Appwrite installation
2. **Run the Appwrite installer** using the official Docker image:
   - Use the `appwrite/appwrite:1.7.4` image with the install entrypoint
   - Mount the Docker socket and installation directory
   - Follow the interactive configuration prompts

**Installation configuration:**
- **HTTP Port**: 80
- **HTTPS Port**: 443
- **Hostname**: Your VM's public IP or custom domain
- **Secret Key**: Generate a secure random key

**Step 3: Configure reverse proxy and SSL**

1. **Configure Nginx** as a reverse proxy:
   - Create a configuration that forwards requests to Appwrite
   - Set appropriate headers and upload limits
   - Enable the site configuration
2. **Obtain SSL certificates** using Certbot with the nginx plugin
3. **Configure automatic certificate renewal**

For detailed SSL setup instructions, see the [SSL certificates guide](/docs/advanced/self-hosting/configuration/tls-certificates).

# AKS deployment {% #aks %}

Deploy Appwrite on Azure Kubernetes Service for enterprise-grade container orchestration.

## Create AKS cluster {% #create-cluster %}

**Step 1: Create and configure AKS cluster**

1. **Create an AKS cluster** with these recommended settings:
   - **Node count**: 3 nodes minimum for high availability
   - **VM size**: Standard_D2s_v3 or larger
   - **Auto-scaling**: Enable cluster autoscaler with appropriate limits
   - **Monitoring**: Enable Azure Monitor integration
   - **SSH access**: Generate SSH keys for node access

2. **Configure cluster access**
   - Obtain cluster credentials for kubectl
   - Verify connectivity to the cluster

**Step 2: Install cluster dependencies**

1. **Install Helm** package manager for Kubernetes
2. **Add required Helm repositories**:
   - ingress-nginx for load balancing
   - cert-manager for SSL certificates (optional)
3. **Install ingress controller** with appropriate configuration

For current AKS setup procedures, refer to the [Azure Kubernetes Service documentation](https://docs.microsoft.com/en-us/azure/aks/).

## Deploy Appwrite on AKS {% #deploy-aks %}

**Step 1: Prepare Kubernetes manifests**

Create the following Kubernetes resources:
- **Namespace** for organizing Appwrite components
- **Secrets** for sensitive data like database credentials
- **PersistentVolumeClaims** for data storage
- **Deployment** for the Appwrite application
- **Service** for internal communication
- **Ingress** for external access

**Step 2: Configure the deployment**

1. **Set resource requirements**:
   - Memory: 1Gi minimum, 2Gi recommended
   - CPU: 500m minimum, 1000m limit
   - Storage: Configure managed premium storage for performance

2. **Configure environment variables**:
   - Production settings
   - Database connections using secrets
   - Domain configuration

3. **Set up networking**:
   - Internal ClusterIP service
   - Ingress controller for external access
   - SSL termination and certificate management

**Step 3: Deploy and verify**

1. **Apply Kubernetes manifests** using kubectl
2. **Monitor pod status** and logs
3. **Test connectivity** and functionality
4. **Configure health checks** and monitoring

For Kubernetes deployment examples, see the [official Kubernetes documentation](https://kubernetes.io/docs/).

# Production considerations {% #production %}

## Security best practices {% #security %}

**Identity and Access Management**
- Create dedicated service principals with minimal required permissions
- Use Azure Active Directory for authentication and authorization
- Implement Azure RBAC for resource access control
- Store sensitive data in Azure Key Vault rather than environment variables

**Network Security**
- Configure Network Security Groups with least-privilege rules
- Use Azure Virtual Networks for network isolation
- Implement Azure Application Gateway or Front Door for additional security
- Enable DDoS protection for production workloads

**Data Protection**
- Enable encryption at rest for databases and storage
- Use Azure Key Vault for certificate and secret management
- Configure Azure Private Link for secure connectivity
- Regular security assessments and compliance checks

## Monitoring and logging {% #monitoring %}

**Azure Monitor Integration**
- Enable Application Insights for application performance monitoring
- Configure Log Analytics workspace for centralized logging
- Set up Azure Monitor alerts for critical metrics
- Use Azure Service Health for service status monitoring

**Monitoring Policies**
Configure alerts for:
- High CPU and memory utilization
- Database connection issues
- Application errors and exceptions
- Storage capacity warnings
- Security-related events

**Performance Monitoring**
- Monitor response times and throughput
- Track error rates and success rates
- Set up availability tests from multiple regions
- Monitor resource utilization trends across services

## Backup and disaster recovery {% #backup %}

**Database Backups**
- Enable automated backups for Azure Database for MySQL
- Configure backup retention policies
- Consider geo-redundant backup storage for disaster recovery

**Application Data Backups**
- Set up regular backups of file uploads and user data
- Use Azure Storage with versioning for backup storage
- Implement automated backup scheduling

For comprehensive backup procedures including database exports, storage volumes, configuration files, and automated scheduling, see the [backup documentation](/docs/advanced/self-hosting/backups).

**Infrastructure as Code**
- Use Azure Resource Manager templates or Terraform for infrastructure provisioning
- Version control all configuration and deployment scripts
- Implement CI/CD pipelines for consistent deployments
- Maintain disaster recovery documentation

# Troubleshooting {% #troubleshooting %}

**Common issues and solutions:**

**Container Apps startup issues**
- Review container logs through Azure portal or CLI
- Verify environment variables and secrets configuration
- Ensure container registry credentials are correct
- Check resource allocation and scaling settings

**Database connectivity problems**
- Verify MySQL server firewall rules and network access
- Check connection string format and credentials
- Test connectivity from the container environment
- Monitor database performance and connection limits

**SSL certificate issues**
- Verify domain ownership and DNS configuration
- Check certificate provisioning status in Azure portal
- Ensure proper domain mapping to services
- Monitor certificate expiration and renewal processes

**Performance optimization**
- Use Azure CDN for static content delivery
- Implement Azure Cache for Redis for session storage
- Configure appropriate auto-scaling policies
- Optimize database queries and indexing
- Monitor and tune resource allocation

**AKS-specific issues**
- Check pod status and logs using kubectl
- Verify node pool health and capacity
- Monitor persistent volume provisioning
- Review ingress and service configurations
- Check RBAC permissions and service account configuration

# Next steps {% #next-steps %}

After successful deployment:

[Configure email delivery](/docs/advanced/self-hosting/configuration/email) - Set up SMTP using Azure Communication Services

[Set up SSL certificates](/docs/advanced/self-hosting/configuration/tls-certificates) - Configure managed SSL certificates

[Production deployment guide](/docs/advanced/self-hosting/production) - Optimize for production workloads

[Update and maintenance](/docs/advanced/self-hosting/update) - Keep your Appwrite instance up to date