---
layout: article
title: DigitalOcean deployment
description: Deploy Appwrite on DigitalOcean using Droplets, App Platform, or Kubernetes. Learn how to set up a production-ready Appwrite instance with step-by-step instructions.
---

DigitalOcean offers several ways to deploy Appwrite, from simple Droplet deployments to fully managed Kubernetes clusters. This guide covers the most popular deployment methods with detailed instructions.

# Deployment options {% #deployment-options %}

Choose the deployment method that best fits your needs:

{% table %}
* Method
* Best For
* Complexity
* Pricing
---
* **Droplets**
* Full control, custom configurations
* Low
* Predictable
---
* **App Platform**
* Managed deployment, automatic scaling
* Medium
* Usage-based
---
* **Kubernetes**
* Container orchestration, high availability
* High
* Resource-based
---
* **Marketplace**
* One-click installation
* Very Low
* Fixed
{% /table %}

# Droplet deployment {% #droplet-deployment %}

Deploy Appwrite on a DigitalOcean Droplet for maximum control and flexibility.

## Prerequisites {% #droplet-prerequisites %}

- DigitalOcean account
- SSH key pair added to your account
- Basic familiarity with Linux command line

## Create and configure Droplet {% #create-droplet %}

**Step 1: Launch Droplet**

1. Log in to your [DigitalOcean Control Panel](https://cloud.digitalocean.com/)
2. Click **Create** â†’ **Droplets**
3. Choose your configuration:
   - **Distribution**: Ubuntu 24.04 LTS or 22.04 LTS
   - **Plan**: Basic (minimum 4GB RAM / 2 vCPUs recommended)
   - **Datacenter**: Choose region closest to your users
   - **Authentication**: SSH keys (select your key)
   - **Hostname**: Choose a descriptive name

4. Click **Create Droplet**

**Step 2: Configure firewall**

Create a DigitalOcean Cloud Firewall with these inbound rules:

{% table %}
* Type
* Protocol
* Port Range
* Sources
---
* SSH
* TCP
* 22
* Your IP address
---
* HTTP
* TCP
* 80
* All IPv4, All IPv6
---
* HTTPS
* TCP
* 443
* All IPv4, All IPv6
---
* Custom
* TCP
* 8080
* All IPv4, All IPv6
{% /table %}

Apply the firewall to your Droplet through the DigitalOcean control panel.

## Install Appwrite {% #install-appwrite %}

**Step 1: Connect to your Droplet**

Use SSH to connect to your Droplet using the IP address provided in your DigitalOcean dashboard.

**Step 2: Install prerequisites**

1. **Update the system** packages to the latest versions
2. **Install Docker** using the official installation method:
   - Use the convenience script from get.docker.com
   - Alternatively, follow the [official Docker installation guide](https://docs.docker.com/engine/install/ubuntu/)
3. **Install Docker Compose** from the [official releases](https://github.com/docker/compose/releases)
4. **Verify installations** by checking version numbers

**Step 3: Install Appwrite**

1. **Create a directory** for your Appwrite installation (e.g., `/opt/appwrite`)
2. **Run the Appwrite installer** using the official Docker image:
   - Use the `appwrite/appwrite:1.7.4` image with the install entrypoint
   - Mount the Docker socket and your installation directory
   - Follow the interactive configuration prompts

**Installation configuration:**
- **HTTP Port**: 80
- **HTTPS Port**: 443
- **Hostname**: Your domain name or Droplet IP
- **Secret Key**: Generate a secure random key (save this securely!)

For detailed installation commands, refer to the [Appwrite self-hosting documentation](/docs/advanced/self-hosting).

## Configure domain and SSL {% #droplet-ssl %}

**Step 1: Point domain to Droplet (optional)**

If using a custom domain:
1. Add an A record in your DNS provider pointing to your Droplet's IP address
2. Wait for DNS propagation (typically 15 minutes to 24 hours)

**Step 2: Set up SSL with Let's Encrypt**

1. **Install Certbot** for automated SSL certificate management
2. **Configure Nginx** as a reverse proxy:
   - Install Nginx package
   - Create a configuration file that proxies requests to Appwrite
   - Configure proper headers and client upload limits
3. **Obtain SSL certificates** using Certbot with the nginx plugin
4. **Enable automatic renewal** to maintain valid certificates

For detailed SSL setup instructions, see the [SSL certificates guide](/docs/advanced/self-hosting/configuration/tls-certificates).

## Optimize for production {% #droplet-optimization %}

**Enable automatic startup**

1. **Create a systemd service** to automatically start Appwrite on boot
2. **Configure the service** to manage Docker Compose operations
3. **Enable and test** the service for reliability

**Set up automated backups**

For comprehensive backup procedures including database exports, storage volumes, configuration files, and automated scheduling, see the [backup documentation](/docs/advanced/self-hosting/backups).

# App Platform deployment {% #app-platform %}

Deploy Appwrite using DigitalOcean's fully managed App Platform service.

## Prerequisites {% #app-platform-prerequisites %}

- DigitalOcean account
- Understanding of containerized applications
- Access to the official Appwrite Docker image

## Deploy from Docker Hub {% #deploy-docker %}

**Step 1: Create new app**

1. Navigate to [DigitalOcean App Platform](https://cloud.digitalocean.com/apps)
2. Click **Create App**
3. Choose **Docker Hub** as your source
4. Configure the service:
   - **Repository**: `appwrite/appwrite`
   - **Tag**: `1.7.4` (or latest stable version)
   - **HTTP Port**: `80`

**Step 2: Configure environment variables**

Set up essential environment variables for production:

{% table %}
* Variable
* Description
* Example Value
---
* `_APP_ENV`
* Environment type
* `production`
---
* `_APP_KEY`
* Encryption key
* Generate secure random string
---
* `_APP_DOMAIN`
* App domain
* `${APP_DOMAIN}` or your custom domain
---
* `_APP_DOMAIN_TARGET`
* Target domain
* Same as `_APP_DOMAIN`
---
* `_APP_SYSTEM_SECURITY_EMAIL_ADDRESS`
* Admin email
* Your admin email address
{% /table %}

**Step 3: Add managed database**

1. In app settings, add a database resource
2. Choose **MongoDB** for compatibility
3. Select appropriate cluster size and region
4. Configure database connection environment variables

**Step 4: Deploy and configure**

1. Review your configuration settings
2. Deploy the application
3. Monitor the deployment logs
4. Test the installation once deployment completes

## Custom domain setup {% #app-platform-domain %}

**Step 1: Add domain**

1. Navigate to your app's **Settings** tab
2. Add your custom domain
3. Choose between apex domain or subdomain configuration

**Step 2: Configure DNS**

1. Add the required DNS records (CNAME or A records) at your domain provider
2. Wait for DNS verification to complete

**Step 3: SSL configuration**

SSL certificates are automatically provisioned and managed by DigitalOcean App Platform for custom domains.

# Kubernetes deployment {% #kubernetes %}

Deploy Appwrite on DigitalOcean Kubernetes (DOKS) for container orchestration and high availability.

## Prerequisites {% #kubernetes-prerequisites %}

- DigitalOcean CLI (`doctl`) installed and configured
- `kubectl` installed locally
- Basic understanding of Kubernetes concepts

## Create Kubernetes cluster {% #create-cluster %}

**Step 1: Set up DOKS cluster**

1. **Install and authenticate doctl** with your DigitalOcean account
2. **Create a Kubernetes cluster** with these recommended settings:
   - **Version**: Latest stable Kubernetes version
   - **Node count**: 3 nodes minimum for high availability
   - **Node size**: s-2vcpu-4gb or larger
   - **Region**: Choose based on your target audience

3. **Configure kubectl** to access your cluster

**Step 2: Install cluster dependencies**

1. **Install Helm** package manager for Kubernetes
2. **Add required Helm repositories**:
   - ingress-nginx for load balancing
   - cert-manager for SSL certificates (optional)
3. **Update repositories** to get latest charts

For current DOKS setup procedures, refer to the [DigitalOcean Kubernetes documentation](https://docs.digitalocean.com/products/kubernetes/).

## Deploy Appwrite {% #deploy-kubernetes %}

**Step 1: Prepare Kubernetes manifests**

Create the following Kubernetes resources:
- **Namespace** for organizing Appwrite components
- **ConfigMap** for non-sensitive configuration
- **Secret** for sensitive data like encryption keys
- **Deployment** for the Appwrite application
- **Service** for internal communication
- **Ingress** for external access

**Step 2: Configure the deployment**

1. **Set resource requirements**:
   - Memory: 512Mi minimum, 2Gi recommended
   - CPU: 250m minimum, 1000m limit
   - Storage: Configure persistent volumes as needed

2. **Configure environment variables**:
   - Production settings
   - Database connections
   - Domain configuration

3. **Set up networking**:
   - Internal ClusterIP service
   - Ingress controller for external access
   - SSL termination configuration

**Step 3: Deploy and verify**

1. **Apply Kubernetes manifests** using kubectl
2. **Monitor pod status** and logs
3. **Test connectivity** and functionality
4. **Configure monitoring** and health checks

For Kubernetes deployment examples, see the [official Kubernetes documentation](https://kubernetes.io/docs/).

# Marketplace deployment {% #marketplace %}

The quickest way to deploy Appwrite on DigitalOcean using the pre-configured marketplace image.

## One-click installation {% #one-click %}

1. Visit the [Appwrite Marketplace page](https://marketplace.digitalocean.com/apps/appwrite)
2. Click **Create Appwrite Droplet**
3. Choose your configuration:
   - **Plan**: Minimum 4GB RAM recommended
   - **Region**: Select closest to your users
   - **SSH keys**: Add your SSH key for access
4. Click **Create Droplet**

## Post-installation setup {% #marketplace-setup %}

**Step 1: Access Appwrite**

1. Wait for Droplet provisioning to complete
2. Navigate to your Droplet's IP address in a web browser
3. Complete the initial setup wizard following the prompts

**Step 2: Configure domain (optional)**

1. **Connect to your Droplet** via SSH
2. **Update the environment configuration**:
   - Navigate to the Appwrite installation directory
   - Edit the environment configuration file
   - Update domain settings as needed
3. **Restart the Appwrite services** to apply changes

# Monitoring and maintenance {% #monitoring %}

## Set up monitoring {% #setup-monitoring %}

**DigitalOcean Monitoring**

1. **Enable monitoring** in your Droplet settings
2. **Configure alerts** for:
   - CPU utilization thresholds
   - Memory usage limits
   - Disk space warnings
   - Network anomalies
3. **Set up uptime monitoring** for your domain

**Application monitoring**

1. **Install monitoring agents** as recommended by DigitalOcean
2. **Configure log shipping** for centralized log analysis
3. **Set up application performance monitoring**
4. **Configure custom dashboards** for key metrics

## Backup strategies {% #backup-strategies %}

**Automated snapshots**

1. **Enable automatic snapshots** in Droplet settings
2. **Configure snapshot frequency** (daily or weekly)
3. **Set retention policies** to manage storage costs
4. **Test snapshot restoration** procedures

**Application and database backups**

For comprehensive backup procedures including database exports, storage volumes, configuration files, automated scheduling, and testing procedures, see the [backup documentation](/docs/advanced/self-hosting/backups).

**Infrastructure as Code**

Consider using tools like Terraform to manage your DigitalOcean infrastructure as code for reproducible deployments.

# Troubleshooting {% #troubleshooting %}

## Common issues {% #common-issues %}

**Droplet connectivity issues**
- Verify firewall rules in DigitalOcean control panel
- Check SSH key configuration and permissions
- Ensure Droplet is properly powered on and running
- Verify network connectivity and DNS resolution

**App Platform deployment failures**
- Review environment variable configuration
- Verify Docker image availability and tags
- Check application logs in the DigitalOcean control panel
- Monitor resource allocation and limits

**SSL certificate problems**
- Ensure domain DNS records point to correct IP address
- Check DNS propagation status using online tools
- Verify web server configuration and SSL settings
- Monitor certificate expiration and renewal processes

**Performance and scaling issues**
- Monitor resource usage through DigitalOcean dashboard
- Consider upgrading Droplet size or App Platform plan
- Review application logs for performance bottlenecks
- Implement caching and optimization strategies

**Kubernetes-specific issues**
- Check pod status and logs using kubectl
- Verify cluster node health and capacity
- Monitor persistent volume provisioning
- Review ingress and service configurations

## Getting help {% #getting-help %}

- [DigitalOcean Community](https://www.digitalocean.com/community/) - Community support and tutorials
- [DigitalOcean Support](https://cloud.digitalocean.com/support) - Official technical support
- [Appwrite Discord](https://discord.gg/GSeTUeA) - Appwrite community support
- [Appwrite Documentation](/docs) - Official Appwrite documentation

# Next steps {% #next-steps %}

After successful deployment:

[Configure email delivery](/docs/advanced/self-hosting/configuration/email) - Set up SMTP for notifications

[Enable SMS authentication](/docs/advanced/self-hosting/configuration/sms) - Configure SMS providers

[Set up external storage](/docs/advanced/self-hosting/configuration/storage) - Use DigitalOcean Spaces for file storage

[Production optimization](/docs/advanced/self-hosting/production) - Optimize for production workloads