---
layout: article
title: Google Cloud deployment
description: Deploy Appwrite on Google Cloud Platform using Cloud Run, Compute Engine, or GKE. Learn how to set up a production-ready Appwrite instance with automatic scaling and managed infrastructure.
---

Google Cloud Platform (GCP) offers multiple deployment options for Appwrite, from serverless containers with Cloud Run to fully managed Kubernetes clusters. This guide covers the most effective deployment methods for different use cases.

# Deployment options {% #deployment-options %}

Choose the deployment method that best fits your requirements:

{% table %}
* Service
* Best For
* Complexity
* Scaling
---
* **Cloud Run**
* Serverless, automatic scaling
* Low
* Automatic
---
* **Compute Engine**
* Custom configurations, full control
* Medium
* Manual
---
* **GKE**
* Container orchestration, high availability
* High
* Automatic
---
* **App Engine**
* Managed platform, simple deployment
* Low
* Automatic
{% /table %}

# Cloud Run deployment {% #cloud-run %}

Deploy Appwrite using Google Cloud Run for a serverless, fully managed experience with automatic scaling.

## Prerequisites {% #cloud-run-prerequisites %}

- Google Cloud account with billing enabled
- Google Cloud CLI installed and authenticated
- Docker installed locally
- Project with required APIs enabled

## Enable required APIs {% #enable-apis %}

```bash
# Enable necessary Google Cloud APIs
gcloud services enable run.googleapis.com
gcloud services enable cloudbuild.googleapis.com
gcloud services enable artifactregistry.googleapis.com
gcloud services enable compute.googleapis.com

# Set your project ID
export PROJECT_ID=your-project-id
gcloud config set project $PROJECT_ID
```

## Prepare container image {% #prepare-image %}

**Step 1: Create Artifact Registry repository**

```bash
# Create repository for Docker images
gcloud artifacts repositories create appwrite-repo \
    --repository-format=docker \
    --location=us-central1 \
    --description="Appwrite container repository"

# Configure Docker authentication
gcloud auth configure-docker us-central1-docker.pkg.dev
```

**Step 2: Build and push Appwrite image**

```bash
# Pull official Appwrite image
docker pull appwrite/appwrite:1.7.4

# Tag for Artifact Registry
docker tag appwrite/appwrite:1.7.4 \
    us-central1-docker.pkg.dev/$PROJECT_ID/appwrite-repo/appwrite:1.7.4

# Push to registry
docker push us-central1-docker.pkg.dev/$PROJECT_ID/appwrite-repo/appwrite:1.7.4
```

## Deploy to Cloud Run {% #deploy-cloud-run %}

**Step 1: Create Cloud SQL instance for database**

```bash
# Create Cloud SQL instance
gcloud sql instances create appwrite-db \
    --database-version=MYSQL_8_0 \
    --tier=db-f1-micro \
    --region=us-central1 \
    --root-password=your-secure-password

# Create database and user
gcloud sql databases create appwrite --instance=appwrite-db
gcloud sql users create appwrite \
    --instance=appwrite-db \
    --password=your-appwrite-password
```

**Step 2: Deploy Appwrite service**

```bash
# Deploy to Cloud Run
gcloud run deploy appwrite \
    --image=us-central1-docker.pkg.dev/$PROJECT_ID/appwrite-repo/appwrite:1.7.4 \
    --platform=managed \
    --region=us-central1 \
    --allow-unauthenticated \
    --memory=2Gi \
    --cpu=2 \
    --port=80 \
    --set-env-vars=_APP_ENV=production \
    --set-env-vars=_APP_WORKER_PER_CORE=6 \
    --set-env-vars=_APP_LOCALE=en \
    --set-env-vars=_APP_CONSOLE_WHITELIST_ROOT=enabled \
    --set-env-vars=_APP_OPTIONS_ABUSE=enabled \
    --set-env-vars=_APP_OPTIONS_FORCE_HTTPS=enabled \
    --set-env-vars=_APP_OPENSSL_KEY_V1=your-encryption-key \
    --set-env-vars=_APP_DOMAIN=your-service-url \
    --set-env-vars=_APP_DOMAIN_TARGET=your-service-url
```

**Step 3: Configure database connection**

```bash
# Get connection name
gcloud sql instances describe appwrite-db --format="value(connectionName)"

# Update Cloud Run service with database connection
gcloud run services update appwrite \
    --region=us-central1 \
    --add-cloudsql-instances=$PROJECT_ID:us-central1:appwrite-db \
    --set-env-vars=_APP_DB_HOST=/cloudsql/$PROJECT_ID:us-central1:appwrite-db \
    --set-env-vars=_APP_DB_PORT=3306 \
    --set-env-vars=_APP_DB_SCHEMA=appwrite \
    --set-env-vars=_APP_DB_USER=appwrite \
    --set-env-vars=_APP_DB_PASS=your-appwrite-password
```

## Configure custom domain {% #cloud-run-domain %}

**Step 1: Map custom domain**

1. Go to [Cloud Run Console](https://console.cloud.google.com/run)
2. Select your `appwrite` service
3. Click **Manage Custom Domains**
4. Click **Add Mapping**
5. Enter your domain and follow verification steps

**Step 2: Update DNS records**

Add the following DNS records at your domain provider:

```
Type: CNAME
Name: your-subdomain (or @)
Value: ghs.googlehosted.com.
```

# Compute Engine deployment {% #compute-engine %}

Deploy Appwrite on Google Compute Engine VMs for maximum control and customization.

## Create VM instance {% #create-vm %}

**Step 1: Launch instance**

```bash
# Create VM instance
gcloud compute instances create appwrite-vm \
    --zone=us-central1-a \
    --machine-type=e2-standard-2 \
    --network-interface=network-tier=PREMIUM,subnet=default \
    --maintenance-policy=MIGRATE \
    --provisioning-model=STANDARD \
    --scopes=https://www.googleapis.com/auth/cloud-platform \
    --image-family=ubuntu-2204-lts \
    --image-project=ubuntu-os-cloud \
    --boot-disk-size=20GB \
    --boot-disk-type=pd-standard \
    --boot-disk-device-name=appwrite-vm \
    --metadata=startup-script='#!/bin/bash
        apt-get update
        apt-get install -y docker.io docker-compose
        systemctl start docker
        systemctl enable docker
        usermod -aG docker $USER'
```

**Step 2: Configure firewall rules**

```bash
# Create firewall rules
gcloud compute firewall-rules create allow-appwrite-http \
    --allow tcp:80 \
    --source-ranges 0.0.0.0/0 \
    --description "Allow HTTP traffic to Appwrite"

gcloud compute firewall-rules create allow-appwrite-https \
    --allow tcp:443 \
    --source-ranges 0.0.0.0/0 \
    --description "Allow HTTPS traffic to Appwrite"

gcloud compute firewall-rules create allow-appwrite-api \
    --allow tcp:8080 \
    --source-ranges 0.0.0.0/0 \
    --description "Allow API traffic to Appwrite"
```

## Install Appwrite on VM {% #install-vm %}

**Step 1: Connect to VM**

```bash
# SSH into your instance
gcloud compute ssh appwrite-vm --zone=us-central1-a
```

**Step 2: Install and configure Appwrite**

```bash
# Create Appwrite directory
sudo mkdir -p /opt/appwrite && cd /opt/appwrite

# Install Appwrite
sudo docker run -it --rm \
    --volume /var/run/docker.sock:/var/run/docker.sock \
    --volume "$(pwd)"/appwrite:/usr/src/code/appwrite:rw \
    --entrypoint="install" \
    appwrite/appwrite:1.7.4
```

Follow the installation prompts:
- **HTTP Port**: 80
- **HTTPS Port**: 443
- **Hostname**: Your VM's external IP or custom domain
- **Secret Key**: Generate a secure random key

**Step 3: Configure SSL with Let's Encrypt**

```bash
# Install Certbot
sudo apt update
sudo apt install certbot nginx -y

# Create Nginx configuration
sudo tee /etc/nginx/sites-available/appwrite << 'EOF'
server {
    listen 80;
    server_name your-domain.com;

    client_max_body_size 100M;

    location / {
        proxy_pass http://localhost:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}
EOF

# Enable site and restart Nginx
sudo ln -s /etc/nginx/sites-available/appwrite /etc/nginx/sites-enabled/
sudo nginx -t && sudo systemctl restart nginx

# Get SSL certificate
sudo certbot --nginx -d your-domain.com
```

# GKE deployment {% #gke %}

Deploy Appwrite on Google Kubernetes Engine for enterprise-grade container orchestration.

## Create GKE cluster {% #create-cluster %}

```bash
# Create GKE cluster
gcloud container clusters create appwrite-cluster \
    --zone=us-central1-a \
    --machine-type=e2-standard-2 \
    --num-nodes=3 \
    --enable-autoscaling \
    --min-nodes=1 \
    --max-nodes=5 \
    --enable-autorepair \
    --enable-autoupgrade

# Get credentials
gcloud container clusters get-credentials appwrite-cluster --zone=us-central1-a
```

## Deploy with Helm {% #helm-deploy %}

```bash
# Install Helm
curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

# Add Appwrite Helm repository (if available) or create custom manifests
kubectl create namespace appwrite

# Create persistent volumes and deploy
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: appwrite-storage
  namespace: appwrite
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appwrite
  namespace: appwrite
spec:
  replicas: 2
  selector:
    matchLabels:
      app: appwrite
  template:
    metadata:
      labels:
        app: appwrite
    spec:
      containers:
      - name: appwrite
        image: us-central1-docker.pkg.dev/$PROJECT_ID/appwrite-repo/appwrite:1.7.4
        ports:
        - containerPort: 80
        env:
        - name: _APP_ENV
          value: "production"
        - name: _APP_DOMAIN
          value: "your-domain.com"
        volumeMounts:
        - name: storage
          mountPath: /storage
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: appwrite-storage
---
apiVersion: v1
kind: Service
metadata:
  name: appwrite-service
  namespace: appwrite
spec:
  selector:
    app: appwrite
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
EOF
```

# Production considerations {% #production %}

## Security best practices {% #security %}

**IAM and Service Accounts**

```bash
# Create service account with minimal permissions
gcloud iam service-accounts create appwrite-sa \
    --description="Service account for Appwrite" \
    --display-name="Appwrite Service Account"

# Grant necessary roles
gcloud projects add-iam-policy-binding $PROJECT_ID \
    --member="serviceAccount:appwrite-sa@$PROJECT_ID.iam.gserviceaccount.com" \
    --role="roles/cloudsql.client"
```

**Network Security**

```bash
# Create VPC network
gcloud compute networks create appwrite-network --subnet-mode=custom

# Create subnet
gcloud compute networks subnets create appwrite-subnet \
    --network=appwrite-network \
    --range=10.0.0.0/24 \
    --region=us-central1
```

## Monitoring and logging {% #monitoring %}

**Enable Google Cloud Monitoring**

```bash
# Deploy monitoring agent (for Compute Engine)
curl -sSO https://dl.google.com/cloudagents/add-google-cloud-ops-agent-repo.sh
sudo bash add-google-cloud-ops-agent-repo.sh --also-install
```

**Set up alerts**

1. Go to [Cloud Monitoring Console](https://console.cloud.google.com/monitoring)
2. Create alerting policies for:
   - High CPU utilization (>80%)
   - High memory usage (>90%)
   - Service downtime
   - Database connection failures

## Backup and disaster recovery {% #backup %}

**Database Backups**

```bash
# Enable automated backups for Cloud SQL
gcloud sql instances patch appwrite-db \
    --backup-start-time=03:00 \
    --retained-backups-count=7
```

**Storage Backups**

```bash
# Create Cloud Storage bucket for backups
gsutil mb gs://$PROJECT_ID-appwrite-backups

# Set up periodic backups (add to cron)
0 2 * * * gcloud sql export sql appwrite-db gs://$PROJECT_ID-appwrite-backups/backup-$(date +\%Y\%m\%d-\%H\%M\%S).sql --database=appwrite
```

# Troubleshooting {% #troubleshooting %}

**Common issues and solutions:**

**Cloud Run cold starts**
- Increase minimum instances to avoid cold starts
- Use Cloud Run always-on CPU allocation

**Database connection issues**
- Verify Cloud SQL Auth Proxy configuration
- Check VPC network connectivity
- Ensure service account has proper permissions

**SSL certificate problems**
- Verify domain ownership in Google Search Console
- Check DNS propagation status
- Ensure certificate is properly mapped to service

**Performance optimization**
- Use Cloud CDN for static assets
- Implement Cloud SQL read replicas
- Configure auto-scaling based on metrics

# Next steps {% #next-steps %}

After successful deployment:

[Configure email delivery](/docs/advanced/self-hosting/configuration/email) - Set up SMTP using Gmail or SendGrid

[Set up SSL certificates](/docs/advanced/self-hosting/configuration/tls-certificates) - Configure managed SSL certificates

[Production deployment guide](/docs/advanced/self-hosting/production) - Optimize for production workloads

[Update and maintenance](/docs/advanced/self-hosting/update) - Keep your Appwrite instance up to date