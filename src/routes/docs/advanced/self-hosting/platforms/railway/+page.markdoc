---
layout: article
title: Railway deployment
description: Deploy Appwrite on Railway using Docker with automatic GitHub integration. Learn how to set up a production-ready Appwrite instance with simple configuration.
---

Railway is a modern cloud platform that simplifies application deployment with automatic builds, zero-config deploys, and seamless Git integration. Railway's Docker support makes it easy to deploy Appwrite with minimal configuration while providing managed databases and automatic scaling.

# Deployment options {% #deployment-options %}

Railway offers flexible deployment approaches for Appwrite:

{% table %}
* Method
* Best For
* Complexity
* Pricing
---
* **Single Service**
* Development, small projects
* Low
* Usage-based
---
* **Multi-Service**
* Production apps, microservices
* Medium
* Usage-based
---
* **Managed Services**
* High availability, enterprise
* Medium
* Usage-based + addon costs
{% /table %}

# Prerequisites {% #prerequisites %}

Before deploying Appwrite on Railway, ensure you have:

- A Railway account (free tier available)
- A GitHub repository for your deployment configuration
- Basic understanding of Docker containers and environment variables
- A domain name (optional, for custom domains)

# Deployment methods {% #deployment-methods %}

## Method 1: Direct GitHub deployment {% #github-deployment %}

**Step 1: Prepare your repository**

1. **Create a new repository** or use an existing one
2. **Add a Docker Compose configuration** based on the official Appwrite setup
3. **Configure for Railway's environment**:
   - Use environment variables for all configuration
   - Set up proper networking between services
   - Configure persistent volumes for data storage

For the current Appwrite Docker Compose template, refer to the [official Appwrite installation guide](/docs/advanced/self-hosting).

**Step 2: Deploy on Railway**

1. **Connect your repository** to Railway:
   - Sign up at [Railway](https://railway.app)
   - Choose "Deploy from GitHub repo"
   - Connect your GitHub account and select your repository

2. **Configure the deployment**:
   - Railway automatically detects Docker Compose configurations
   - Set your deployment domain through the Railway dashboard
   - Configure environment variables for production settings

3. **Environment configuration**:
   Set up essential environment variables including:
   - Production environment settings
   - Encryption keys and security configurations
   - Database credentials and connection settings
   - Domain and URL configurations
   - SMTP settings for email functionality

For the complete list of required environment variables, see the [environment variables documentation](/docs/advanced/self-hosting/configuration/environment-variables).

**Step 3: Deploy and verify**

1. **Deploy your application** using Railway's dashboard
2. **Monitor the build process** through Railway's real-time logs
3. **Access your deployment** at the provided Railway URL
4. **Test core functionality** including authentication and database operations

## Method 2: Multi-service deployment {% #multi-service %}

For production deployments requiring better scalability and resource isolation:

**Service separation approach:**
- **Main Appwrite service**: Core application functionality
- **Database service**: MariaDB or MySQL for data storage
- **Cache service**: Redis for session management and caching
- **Analytics service**: InfluxDB for usage analytics (optional)

**Benefits of multi-service deployment:**
- Independent scaling of components
- Better resource monitoring and allocation
- Improved fault isolation
- Easier maintenance and updates

**Configuration steps:**
1. **Create separate Railway services** for each component
2. **Configure internal networking** between services
3. **Set up shared environment variables** across services
4. **Configure persistent storage** for each data service

For detailed multi-service architecture patterns, refer to the [Railway documentation](https://docs.railway.app) and [production deployment guide](/docs/advanced/self-hosting/production).

## Method 3: Using Railway's managed services {% #managed-services %}

**Database integration:**
- Use Railway's managed PostgreSQL or MySQL instead of containerized databases
- Automatic backups and maintenance
- Better performance and reliability for production workloads

**Redis integration:**
- Use Railway's managed Redis service
- Automatic scaling and monitoring
- Reduced container resource usage

**Configuration approach:**
1. **Create managed database** and Redis services through Railway
2. **Update your Appwrite configuration** to use managed service endpoints
3. **Configure connection credentials** using Railway's service linking
4. **Deploy your main Appwrite service** with simplified container setup

# Configuration best practices {% #configuration %}

## Environment variables {% #environment-variables %}

**Security settings:**
Configure production-ready security settings including:
- Environment mode and debug settings
- Encryption keys and secrets management
- HTTPS enforcement and security headers
- API rate limiting and abuse protection

**Database configuration:**
Set up database connectivity including:
- Host and port configuration
- Authentication credentials
- Connection pooling settings
- Backup and maintenance schedules

**Email and notifications:**
Configure SMTP settings for:
- User authentication emails
- System notifications
- Password reset functionality
- Security alerts

For comprehensive environment variable documentation, see the [environment variables guide](/docs/advanced/self-hosting/configuration/environment-variables).

## Persistent storage {% #storage %}

**Volume management:**
- Railway automatically handles volume persistence for Docker Compose deployments
- Data persists across deployments and container restarts
- Configure appropriate storage sizes based on your usage patterns

**Storage considerations:**
- File uploads and user-generated content
- Database data and transaction logs
- Cache and temporary file storage
- Backup and recovery requirements

For detailed backup strategies and procedures, see the [backup documentation](/docs/advanced/self-hosting/backups).

# Custom domains {% #custom-domains %}

**Domain setup process:**

1. **Add your domain** in Railway's service settings
2. **Configure DNS records** at your domain provider:
   - Add CNAME records pointing to your Railway deployment
   - Configure any required verification records
3. **Update environment variables** to reflect your custom domain
4. **Verify SSL certificate** provisioning and HTTPS configuration

**SSL certificates:**
- Railway automatically provisions SSL certificates for custom domains
- Certificates are managed and renewed automatically
- Support for both single domains and wildcard certificates

# Scaling and performance {% #scaling %}

**Automatic scaling features:**
- **Vertical scaling**: Automatic CPU and memory adjustment based on demand
- **Horizontal scaling**: Multiple instance deployment for high availability (paid plans)
- **Resource monitoring**: Built-in metrics and performance tracking

**Performance optimization:**
- Use Railway's managed databases for improved performance
- Implement CDN integration for static asset delivery
- Configure appropriate caching strategies
- Monitor and optimize database queries and indexing

**Cost optimization:**
- Railway's pay-as-you-scale model adjusts costs to actual usage
- Monitor resource consumption through the dashboard
- Optimize container resource allocation
- Use managed services where cost-effective

# Monitoring and troubleshooting {% #monitoring %}

**Built-in monitoring:**
- **Real-time logs**: View application and system logs through Railway's dashboard
- **Resource metrics**: Monitor CPU, memory, and storage usage
- **Service health**: Track uptime and availability
- **Performance insights**: Analyze response times and throughput

**Common troubleshooting scenarios:**

**Build and deployment issues:**
- Review build logs for configuration errors
- Verify all required environment variables are set
- Check Docker configuration syntax and formatting
- Ensure proper service dependencies and networking

**Runtime and connectivity issues:**
- Monitor application logs for error patterns
- Verify database connectivity and credentials
- Check service-to-service communication
- Validate external API and SMTP configurations

**Performance and scaling issues:**
- Analyze resource utilization patterns
- Monitor database performance and query efficiency
- Review caching effectiveness
- Evaluate scaling configuration and limits

**Getting help:**
- Railway provides comprehensive [documentation](https://docs.railway.app)
- Active [Discord community](https://discord.gg/railway) for support
- Built-in support system for technical issues
- Community templates and examples

# Production considerations {% #production %}

**Security best practices:**
- Use Railway's environment variable encryption for sensitive data
- Implement proper access controls and API security
- Configure comprehensive logging and monitoring
- Regular security updates and vulnerability scanning

**Backup and disaster recovery:**
- Implement automated backup strategies
- Test backup restoration procedures
- Configure cross-region redundancy if required
- Document disaster recovery processes

For comprehensive backup procedures including database exports, file storage, and configuration management, see the [backup documentation](/docs/advanced/self-hosting/backups).

**Performance and reliability:**
- Use managed services for critical components
- Implement health checks and monitoring
- Configure appropriate scaling policies
- Optimize for your specific usage patterns

# Next steps {% #next-steps %}

After deploying Appwrite on Railway:

[Configure authentication](/docs/products/auth) - Set up user management and OAuth providers

[Design your database](/docs/products/databases) - Create collections and configure data relationships

[Set up email delivery](/docs/advanced/self-hosting/configuration/email) - Configure SMTP for user notifications

[Production optimization](/docs/advanced/self-hosting/production) - Optimize your deployment for production workloads

[Monitor and maintain](/docs/advanced/self-hosting/update) - Keep your Appwrite instance updated and secure

Railway's developer-friendly platform and pay-as-you-scale model make it an excellent choice for Appwrite deployments, from development to production scale.