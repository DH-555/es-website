---
layout: article
title: Render deployment
description: Deploy Appwrite on Render using Docker with automatic GitHub integration. Learn how to set up a production-ready Appwrite instance with managed databases and zero-downtime deploys.
---

Render is a modern cloud platform that provides automatic builds, free SSL, custom domains, and managed databases. Its Docker support and seamless GitHub integration make it an excellent choice for deploying Appwrite with minimal configuration.

# Deployment options {% #deployment-options %}

Render offers flexible deployment methods for Appwrite:

{% table %}
* Method
* Best For
* Complexity
* Pricing
---
* **Docker from Repository**
* Full customization, version control
* Low
* Usage-based
---
* **Pre-built Image**
* Quick deployment, minimal setup
* Very Low
* Usage-based
---
* **Blueprint**
* Multi-service deployment, infrastructure as code
* Medium
* Usage-based
{% /table %}

# Prerequisites {% #prerequisites %}

Before deploying Appwrite on Render, ensure you have:

- A Render account (free tier available)
- A GitHub repository (for Docker deployment method)
- Basic understanding of Docker containers and environment variables
- Domain name (optional, for custom domains)

# Deployment methods {% #deployment-methods %}

## Method 1: Deploy from GitHub repository {% #github-deployment %}

This method builds Appwrite from a Dockerfile in your repository, providing full control over the deployment process.

**Step 1: Prepare your repository**

1. **Create a repository structure** with the necessary files:
   - Dockerfile based on the official Appwrite image
   - Environment variable template
   - Optional: render.yaml for infrastructure as code

2. **Configure the Dockerfile**:
   - Use the official Appwrite image (version 1.7.4 recommended)
   - Set appropriate environment variables for production
   - Configure health checks and port exposure
   - Set up proper security settings

For the current Appwrite Docker configuration, refer to the [official Appwrite installation guide](/docs/advanced/self-hosting).

**Step 2: Set up managed services**

1. **Create a PostgreSQL database**:
   - Navigate to Render Dashboard
   - Create a new PostgreSQL instance
   - Choose appropriate region and plan
   - Note connection details for environment configuration

2. **Create a Redis instance**:
   - Set up Redis for caching and session management
   - Choose the same region as your database
   - Configure appropriate plan based on usage needs

**Step 3: Deploy the web service**

1. **Connect your GitHub repository** to Render
2. **Configure the web service**:
   - Set environment to Docker
   - Specify Dockerfile path
   - Choose appropriate instance type and region
   - Configure health check endpoint

3. **Set up environment variables**:
   - Production environment settings
   - Database connection parameters
   - Encryption keys and security configurations
   - Domain and URL settings
   - SMTP configuration for email functionality

For a comprehensive list of required environment variables, see the [environment variables documentation](/docs/advanced/self-hosting/configuration/environment-variables).

## Method 2: Deploy pre-built image {% #prebuilt-deployment %}

Deploy Appwrite using the official Docker image directly from Docker Hub for quick setup.

**Quick deployment steps:**

1. **Set up managed databases** following the same process as Method 1
2. **Create a web service** using the pre-built image:
   - Use the official `appwrite/appwrite:1.7.4` image
   - Configure the service with appropriate resource allocation
   - Set up health checks and monitoring

3. **Configure environment variables** with the same parameters as the repository method
4. **Deploy and verify** functionality

This method is ideal for users who want to get started quickly without managing custom Docker configurations.

## Method 3: Blueprint deployment {% #blueprint-deployment %}

Use Render Blueprints for infrastructure as code deployment with all services configured together.

**Blueprint approach:**

1. **Create a render.yaml file** that defines:
   - Web service configuration
   - Database service definitions
   - Environment variable mappings
   - Service dependencies and relationships

2. **Deploy using Blueprint**:
   - Push the blueprint file to your repository
   - Create a new Blueprint in Render Dashboard
   - Review and apply the configuration
   - Render automatically creates all services

**Benefits of Blueprint deployment:**
- Infrastructure as code approach
- Automatic service linking and environment variable management
- Easier team collaboration and reproducible deployments
- Version control for your infrastructure configuration

For current Render Blueprint syntax and examples, refer to the [Render documentation](https://render.com/docs/blueprint-spec).

# Configuration best practices {% #configuration %}

## Environment variables {% #environment-variables %}

**Security configuration:**
- Use Render's secret environment variables for sensitive data
- Generate strong encryption keys using secure random generators
- Configure production security settings including HTTPS enforcement
- Set up proper access controls and API security

**Database connectivity:**
- Configure connection parameters for PostgreSQL and Redis
- Set up appropriate connection pooling
- Configure backup and maintenance settings
- Monitor connection limits and performance

**Email and notifications:**
- Set up SMTP configuration for user notifications
- Configure system email addresses
- Set up proper email security and authentication
- Test email delivery functionality

## Performance optimization {% #performance %}

**Instance sizing:**
- Start with appropriate RAM allocation for production workloads
- Monitor resource usage through Render Dashboard
- Scale instance types based on traffic patterns and performance metrics
- Consider database instance sizing for optimal performance

**Caching and storage:**
- Configure Redis for improved caching performance
- Set up proper static asset delivery
- Optimize database queries and indexing
- Consider CDN integration for global content delivery

# Custom domains {% #custom-domains %}

**Domain setup process:**

1. **Add your custom domain** in Render's web service settings
2. **Configure DNS records** at your domain provider:
   - Add CNAME records pointing to your Render service
   - Configure any required verification records
3. **Update environment variables** to reflect your custom domain
4. **Verify SSL certificate** provisioning and HTTPS configuration

**SSL certificates:**
- Render automatically provisions SSL certificates for custom domains
- Certificates are managed and renewed automatically
- Support for both single domains and subdomains

# Production considerations {% #production %}

## Security best practices {% #security %}

**Environment and data security:**
- Use Render's secret environment variables for all sensitive data
- Implement strong database passwords and regular rotation
- Configure proper access controls and network security
- Regular security assessments and updates

**Application security:**
- Enable HTTPS enforcement and security headers
- Configure proper authentication and authorization
- Implement rate limiting and abuse protection
- Monitor security logs and events

## Monitoring and logging {% #monitoring %}

**Built-in monitoring:**
- **Dashboard metrics**: Monitor response times, error rates, and resource usage
- **Application logs**: Access real-time logs and configure retention policies
- **Health checks**: Set up appropriate health check intervals and endpoints
- **Alerts**: Configure notifications for critical metrics and downtime

**Performance monitoring:**
- Track database performance and connection health
- Monitor memory and CPU utilization patterns
- Analyze response time trends and bottlenecks
- Set up external uptime monitoring

## Backup and disaster recovery {% #backup %}

**Database backups:**
- Enable automatic daily backups for PostgreSQL
- Configure backup retention policies
- Consider cross-region backup storage for disaster recovery

**Application data backups:**
- Set up regular backups of file uploads and user data
- Configure proper backup storage and retention
- Implement automated backup verification

For comprehensive backup procedures including database exports, storage volumes, configuration files, and automated scheduling, see the [backup documentation](/docs/advanced/self-hosting/backups).

**Infrastructure as code:**
- Use render.yaml for reproducible deployments
- Version control all configuration and deployment scripts
- Document deployment procedures and disaster recovery plans
- Implement proper change management processes

# Troubleshooting {% #troubleshooting %}

**Common deployment issues:**

**Build and deployment problems:**
- Review build logs for configuration errors
- Verify Dockerfile syntax and base image availability
- Check environment variable configuration
- Ensure proper service dependencies

**Database connectivity issues:**
- Verify database connection parameters and credentials
- Check network connectivity between services
- Monitor database performance and connection limits
- Ensure services are in the same region for optimal performance

**Performance and resource issues:**
- Monitor memory and CPU usage through Render Dashboard
- Analyze database query performance and optimization
- Review caching effectiveness and configuration
- Consider instance size upgrades based on usage patterns

**SSL and domain issues:**
- Verify DNS propagation and domain configuration
- Check certificate provisioning status
- Ensure proper domain mapping in environment variables
- Monitor certificate renewal processes

**Getting help:**
- Render provides comprehensive [documentation](https://render.com/docs)
- Active community support and forums
- Built-in support system for technical issues
- Extensive knowledge base and tutorials

# Next steps {% #next-steps %}

After successful deployment:

[Configure email delivery](/docs/advanced/self-hosting/configuration/email) - Set up SMTP for user notifications

[Set up SSL certificates](/docs/advanced/self-hosting/configuration/tls-certificates) - Manage SSL certificates

[Production deployment guide](/docs/advanced/self-hosting/production) - Optimize for production workloads

[Update and maintenance](/docs/advanced/self-hosting/update) - Keep your Appwrite instance up to date

Render's developer-friendly platform and automatic infrastructure management make it an excellent choice for Appwrite deployments, offering scalability and reliability for applications of all sizes.