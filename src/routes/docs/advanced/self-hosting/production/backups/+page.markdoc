---
layout: article
title: Backups
description: Learn how to set up and manage backups for your self-hosted Appwrite instance to ensure data safety and disaster recovery.
---

{% info title="Looking for automated backups?" %}
Appwrite Cloud offers automated [Backups as a Service](/docs/products/databases/backups) with scheduling and one-click restore.

For self-hosted instances, you'll need to implement manual backup procedures as outlined on this page.
{% /info %}

Regular backups are essential for all production Appwrite deployments. This page explains how to implement backups for your self-hosted instance.

# Identify what to back up {% #what-to-backup %}

Back up these critical components of your Appwrite installation:

1. **Database** - All application data including users, documents, and settings
2. **Storage Files** - User-uploaded files and assets
3. **Environment Variables** - Your `.env` configuration
4. **Custom Functions** - Any custom function code not stored in external repositories
5. **Sites** - Deployed website content from Appwrite's hosting feature

# Back up the database {% #database-backup %}

Appwrite uses MariaDB as its primary database. To back up the database:

### Create database backups

```bash
# Create a database backup
docker compose exec mariadb sh -c 'exec mysqldump --all-databases --add-drop-database -u"$MYSQL_USER" -p"$MYSQL_PASSWORD"' > ./dump.sql

# Restore from backup
docker compose exec -T mariadb sh -c 'exec mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD"' < dump.sql
```

{% info title="Important" %}
Only restore to a fresh Appwrite installation. Restoring to an existing installation may cause data corruption.
{% /info %}

### Automate database backups

Create a shell script to automate daily backups:

```bash
#!/bin/bash
BACKUP_DIR="/path/to/backup/directory"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_FILE="$BACKUP_DIR/appwrite_db_$TIMESTAMP.sql"

# Create backup directory if it doesn't exist
mkdir -p $BACKUP_DIR

# Create the database backup
docker compose exec mariadb sh -c 'exec mysqldump --all-databases --add-drop-database -u"$MYSQL_USER" -p"$MYSQL_PASSWORD"' > $BACKUP_FILE

# Compress the backup
gzip $BACKUP_FILE

# Remove backups older than 7 days
find $BACKUP_DIR -name "appwrite_db_*.sql.gz" -type f -mtime +7 -delete

echo "Backup completed: $BACKUP_FILE.gz"
```

Make the script executable and schedule it with cron:

```bash
# Make executable
chmod +x backup_appwrite.sh

# Run daily at 2 AM
0 2 * * * /path/to/backup_appwrite.sh >> /path/to/backup_appwrite.log 2>&1
```

# Back up storage volumes {% #storage-backup %}

Appwrite stores data in Docker volumes, including uploads, functions, and builds. Before running these commands, shut down your Appwrite instance to ensure a complete backup.

```bash
# Create backup directory
mkdir -p backup

# Backup uploads volume
docker run --rm --volumes-from "$(docker compose ps -q appwrite)" -v $PWD/backup:/backup ubuntu bash -c "cd /storage/uploads && tar cvf /backup/uploads.tar ."

# Backup functions volume
docker run --rm --volumes-from "$(docker compose ps -q appwrite)" -v $PWD/backup:/backup ubuntu bash -c "cd /storage/functions && tar cvf /backup/functions.tar ."

# Backup builds volume
docker run --rm --volumes-from "$(docker compose ps -q appwrite)" -v $PWD/backup:/backup ubuntu bash -c "cd /storage/builds && tar cvf /backup/builds.tar ."

# Backup sites volume
docker run --rm --volumes-from "$(docker compose ps -q appwrite)" -v $PWD/backup:/backup ubuntu bash -c "cd /storage/sites && tar cvf /backup/sites.tar ."
```

### Restore volumes

To restore volumes, ensure Appwrite is shut down, then run:

```bash
# Restore uploads volume
docker run --rm --volumes-from "$(docker compose ps -q appwrite)" -v $PWD/backup:/restore ubuntu bash -c "cd /storage/uploads && tar xvf /restore/uploads.tar --strip 1"

# Restore functions volume
docker run --rm --volumes-from "$(docker compose ps -q appwrite)" -v $PWD/backup:/restore ubuntu bash -c "cd /storage/functions && tar xvf /restore/functions.tar --strip 1"

# Restore builds volume
docker run --rm --volumes-from "$(docker compose ps -q appwrite)" -v $PWD/backup:/restore ubuntu bash -c "cd /storage/builds && tar xvf /restore/builds.tar --strip 1"

# Restore sites volume
docker run --rm --volumes-from "$(docker compose ps -q appwrite)" -v $PWD/backup:/restore ubuntu bash -c "cd /storage/sites && tar xvf /restore/sites.tar --strip 1"
```

{% info title="External storage" %}
If you've configured Appwrite to use S3, GCS, or Azure Blob Storage, use the respective provider's native backup tools to ensure consistent backups.
{% /info %}

# Back up environment variables {% #env-backup %}

Always keep a secure backup of your `.env` file, as it contains critical configuration settings:

```bash
# Make a copy of your environment variables
cp .env .env.backup.$(date +"%Y%m%d")
```

{% info title="Critical variable" %}
The `_APP_OPENSSL_KEY_V1` environment variable is especially important as Appwrite uses it for data encryption. When restoring to a new instance, be sure to copy this value exactly from your original installation, or your encrypted data will be inaccessible.
{% /info %}

Store this backup securely, as it contains sensitive information and secrets.

# Plan for disaster recovery {% #disaster-recovery %}

Your disaster recovery plan should include:

1. **Regular testing** - Verify your backup and restore procedures work correctly
2. **Off-site storage** - Keep backups in a separate physical or virtual location
3. **Documentation** - Maintain detailed recovery steps
4. **Recovery time objective (RTO)** - Define your maximum acceptable downtime

# Create complete system backups {% #complete-backup %}

For comprehensive protection, create a snapshot of your entire server or virtual machine.

**AWS EC2 example:**
1. Open the EC2 console
2. Select your instance
3. Choose Actions > Image > Create Image
4. Complete the snapshot creation process

Other cloud providers (Google Cloud Platform, Microsoft Azure, DigitalOcean) offer similar snapshot capabilities.

# Follow best practices {% #best-practices %}

For effective Appwrite backups:

- **Automate backups** for consistency and reliability
- **Test restores** to verify backup integrity
- **Monitor backup jobs** to detect failures early
- **Implement retention policies** to manage storage usage
- **Document procedures** for team knowledge sharing
- **Encrypt backups** to protect sensitive data
- **Use version control** for functions code and configuration files
