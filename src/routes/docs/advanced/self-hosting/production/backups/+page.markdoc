---
layout: article
title: Backups
description: Learn how to set up and manage backups for your self-hosted Appwrite instance to ensure data safety and disaster recovery.
---

{% info title="Looking for automated backups?" %}
Appwrite Cloud offers automated [Backups as a Service](/docs/products/databases/backups) with scheduling and one-click restore.

For self-hosted instances, you'll need to implement manual backup procedures as outlined on this page.
{% /info %}

Regular backups are essential for all production Appwrite deployments. This page explains how to implement backups for your self-hosted instance.

# Identify what to back up {% #what-to-backup %}

Back up these critical components of your Appwrite installation:

1. **Database** - All application data including users, documents, and settings
2. **Storage Files** - User-uploaded files and assets
3. **Environment Variables** - Your `.env` configuration
4. **Custom Functions** - Any custom function code not stored in external repositories
5. **Sites** - Deployed website content from Appwrite's hosting feature

# Back up the database {% #database-backup %}

Appwrite uses MariaDB as its primary database. For database backups:

### Database backup approach

Use MariaDB's built-in tools for consistent backups:
- **`mysqldump`** - Creates logical backups suitable for most installations
- **Physical backups** - For large databases, consider tools like `mariabackup`

### Basic backup example

```bash
# Create a database backup
docker compose exec mariadb sh -c 'exec mysqldump --all-databases --add-drop-database --single-transaction -u"$MYSQL_USER" -p"$MYSQL_PASSWORD"' > ./dump.sql

# Restore from backup (to a fresh installation only)
docker compose exec -T mariadb sh -c 'exec mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD"' < dump.sql
```

{% info title="Important" %}
Only restore to a fresh Appwrite installation. Restoring to an existing installation may cause data corruption.
{% /info %}

### Automation recommendations

- **Schedule regular backups** using cron or your system's task scheduler
- **Compress backups** to save storage space (gzip recommended)
- **Implement retention policies** to manage backup storage costs
- **Test restore procedures** regularly in a non-production environment

# Back up storage volumes {% #storage-backup %}

Appwrite stores data in multiple Docker volumes. Always shut down Appwrite before backing up volumes to ensure data consistency.

## Volume backup approach

Appwrite uses the following volumes that should be backed up:

- `appwrite-uploads` - User-uploaded files and assets
- `appwrite-functions` - Custom function code and dependencies
- `appwrite-builds` - Function build artifacts
- `appwrite-sites` - Static site deployments
- `appwrite-certificates` - SSL certificates
- `appwrite-config` - Configuration files
- `appwrite-imports` - Data import files
- `appwrite-cache` - Application cache data
- `appwrite-redis` - Redis data (sessions, queues)
- `appwrite-mariadb` - Database files (handled separately above)

### Backup methods

**Option 1: Docker volume backup (recommended)**
```bash
# Backup a single volume
docker run --rm -v volume_name:/data -v $(pwd)/backup:/backup ubuntu tar czf "/backup/volume_name.tar.gz" -C /data .

# Restore a volume
docker run --rm -v volume_name:/data -v $(pwd)/backup:/backup ubuntu tar xzf "/backup/volume_name.tar.gz" -C /data
```

**Option 2: Direct volume copy**
```bash
# Find volume location
docker volume inspect volume_name

# Copy volume data (requires appropriate permissions)
sudo cp -a /var/lib/docker/volumes/volume_name/_data /backup/volume_name_backup
```

### Volume backup considerations

{% info title="Permission considerations" %}
Volume backups may encounter permission issues if files are owned by different users. If you experience permission errors, try running the backup commands with `sudo` or ensure your backup directory has appropriate permissions.
{% /info %}

{% info title="Important" %}
Always restore to a fresh Appwrite installation. Restoring volumes may overwrite existing data and could cause permission issues. Ensure the backup files have appropriate read permissions before restoring.
{% /info %}

{% info title="External storage" %}
If you've configured Appwrite to use S3, GCS, or Azure Blob Storage, use the respective provider's native backup tools to ensure consistent backups.
{% /info %}

# Back up environment variables {% #env-backup %}

Always keep a secure backup of your `.env` file, as it contains critical configuration settings:

```bash
# Make a copy of your environment variables
cp .env .env.backup.$(date +"%Y%m%d")
```

{% info title="Critical variable" %}
The `_APP_OPENSSL_KEY_V1` environment variable is especially important as Appwrite uses it for data encryption. When restoring to a new instance, be sure to copy this value exactly from your original installation, or your encrypted data will be inaccessible.
{% /info %}

Store this backup securely, as it contains sensitive information and secrets.

# Plan for disaster recovery {% #disaster-recovery %}

Your disaster recovery plan should include:

1. **Regular testing** - Verify your backup and restore procedures work correctly
2. **Off-site storage** - Keep backups in a separate physical or virtual location
3. **Documentation** - Maintain detailed recovery steps
4. **Recovery time objective (RTO)** - Define your maximum acceptable downtime

# Create complete system backups {% #complete-backup %}

For comprehensive protection, create a snapshot of your entire server or virtual machine.

### Cloud provider snapshots

**AWS EC2:**
1. Open the EC2 console
2. Select your instance
3. Choose Actions > Image > Create Image
4. Complete the snapshot creation process

**Other providers:** Google Cloud Platform, Microsoft Azure, and DigitalOcean offer similar snapshot capabilities.

### Benefits of system snapshots

- **Complete system state** - Captures entire server configuration
- **Fast recovery** - Restore entire system in minutes
- **Version control** - Multiple snapshots for different points in time
- **Disaster recovery** - Protect against hardware failures

# Implement backup automation {% #automation %}

### Backup strategy recommendations

1. **Schedule automated backups** - Use cron jobs or cloud provider automation
2. **Implement the 3-2-1 rule** - 3 copies, 2 different media types, 1 offsite
3. **Test restores regularly** - Verify backup integrity quarterly
4. **Monitor backup jobs** - Set up alerts for backup failures
5. **Document procedures** - Maintain runbooks for recovery scenarios

### Third-party backup tools

Consider enterprise backup solutions for production deployments:
- **Velero** - Kubernetes-native backup solution
- **Restic** - Secure, efficient backup program
- **Borg** - Deduplicating backup program
- **Cloud provider tools** - AWS Backup, Azure Backup, GCP Cloud Storage

### Backup monitoring

Set up monitoring for:
- Backup job completion status
- Backup file integrity checks
- Storage usage and costs
- Recovery time testing results

# Follow best practices {% #best-practices %}

## Essential backup practices

| Practice | Recommendation |
|----------|---------------|
| **Frequency** | Daily database backups, weekly volume backups minimum |
| **Retention** | Keep 7 daily, 4 weekly, 12 monthly backups |
| **Testing** | Test restore procedures quarterly |
| **Storage** | Store backups in different location than primary data |
| **Security** | Encrypt backups and restrict access |
| **Monitoring** | Alert on backup failures within 24 hours |
| **Documentation** | Maintain current recovery procedures |

## Recovery planning

Your disaster recovery plan should define:

1. **Recovery Point Objective (RPO)** - Maximum acceptable data loss
2. **Recovery Time Objective (RTO)** - Maximum acceptable downtime
3. **Communication plan** - Who to notify during incidents
4. **Escalation procedures** - When to engage additional resources

## Security considerations

- **Encrypt backup files** using tools like GPG or cloud encryption
- **Secure storage access** with proper authentication and authorization
- **Regular security audits** of backup systems and procedures
- **Compliance requirements** specific to your industry or region
