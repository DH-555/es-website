---
layout: article
title: Bulk operations
description: Perform bulk operations on rows within your tables for efficient data handling.
---

Appwrite Databases supports bulk operations for rows, allowing you to create, update, or delete multiple rows in a single request. This can significantly improve performance for apps as it allows you to reduce the number of API calls needed while working with large data sets.

As of now, bulk operations can only be performed via the server-side SDKs. The client-side SDKs do not support bulk operations.

# Create rows {% #create-rows %}

{% info title="Permissions required" %}
You must grant **create** permissions to users at the **table level** before users can create rows.
[Learn more about permissions](/docs/products/databases/permissions)
{% /info %}

You can create multiple rows in a single request using the `createRows` method.

{% multicode %}
```server-nodejs
const sdk = require('node-appwrite');

const client = new sdk.Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('<API_KEY>');

const tables = new sdk.Tables(client);

const result = await tables.createRows(
    '<DATABASE_ID>',
    '<TABLE_ID>',
    [
        {
            rowId: sdk.ID.unique(),
            data: { name: 'Row 1' }
        },
        {
            rowId: sdk.ID.unique(),
            data: { name: 'Row 2' }
        }
    ]
);
```

```server-python
from appwrite.client import Client
from appwrite.services.databases import Tables

client = Client()
client.set_endpoint('https://<REGION>.cloud.appwrite.io/v1')
client.set_project('<PROJECT_ID>')
client.set_key('<API_KEY>')

tables = Tables(client)

result = tables.create_rows(
    database_id = '<DATABASE_ID>',
    collection_id = '<TABLE_ID>',
    rows = [
        {
            'rowId': appwrite.ID.unique(),
            'data': { 'name': 'Row 1' }
        },
        {
            'rowId': appwrite.ID.unique(),
            'data': { 'name': 'Row 2' }
        }
    ]
)
```
{% /multicode %}

# Update rows {% #update-rows %}

{% info title="Permissions required" %}
You must grant **update** permissions to users at the **table level** before users can update rows.
[Learn more about permissions](/docs/products/databases/permissions)
{% /info %}

You can update multiple rows in a single request using the `updateRows` method.

{% multicode %}
```server-nodejs
const sdk = require('node-appwrite');

const client = new sdk.Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('<API_KEY>');

const tables = new sdk.Tables(client);

const result = await tables.updateRows(
    '<DATABASE_ID>',
    '<TABLE_ID>',
    {
        {
            rowId: 'row-id-1',
            data: { name: 'Updated Row 1' }
        },
        {
            rowId: 'row-id-2',
            data: { name: 'Updated Row 2' }
        }
    }
);
```

```server-python
from appwrite.client import Client
from appwrite.services.databases import Tables

client = Client()
client.set_endpoint('https://<REGION>.cloud.appwrite.io/v1')
client.set_project('<PROJECT_ID>')
client.set_key('<API_KEY>')

tables = Tables(client)

result = tables.update_rows(
    database_id = '<DATABASE_ID>',
    collection_id = '<TABLE_ID>',
    data = {
        {
            'rowId': 'row-id-1',
            'data': { 'name': 'New Row 1' }
        },
        {
            'rowId': 'row-id-2',
            'data': { 'name': 'New Row 2' }
        }
    }
)
```
{% /multicode %}

# Upsert rows {% #upsert-rows %}

{% info title="Permissions required" %}
You must grant **create** and **update** permissions to users at the **table level** before users can create rows.
[Learn more about permissions](/docs/products/databases/permissions)
{% /info %}

You can upsert multiple rows in a single request using the `upsertRows(` method.

{% multicode %}
```server-nodejs
const sdk = require('node-appwrite');

const client = new sdk.Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('<API_KEY>');

const tables = new sdk.Tables(client);

const result = await tables.upsertRows(
    '<DATABASE_ID>',
    '<TABLE_ID>',
    [
        {
            rowId: sdk.ID.unique(),
            data: { name: 'New Row 1' }
        },
        {
            rowId: 'row-id-2', // Existing row ID
            data: { name: 'New Row 2' }
        }
    ]
);
```

```server-python
from appwrite.client import Client
from appwrite.services.databases import Databases

client = Client()
client.set_endpoint('https://<REGION>.cloud.appwrite.io/v1')
client.set_project('<PROJECT_ID>')
client.set_key('<API_KEY>')

tables = Tables(client)

result = tables.upsert_rows(
    database_id = '<DATABASE_ID>',
    collection_id = '<TABLE_ID>',
    rows = [
        {
            'rowId': appwrite.ID.unique(),
            'data': { 'name': 'Row 1' }
        },
        {
            'rowId': 'row-id-2',  # Existing row ID
            'data': { 'name': 'New Row 2' }
        }
    ]
)
```
{% /multicode %}

# Delete rows {% #delete-rows %}

{% info title="Permissions required" %}
You must grant **delete** permissions to users at the **table level** before users can delete rows.
[Learn more about permissions](/docs/products/databases/permissions)
{% /info %}

You can delete multiple rows in a single request using the `deleteRows` method.

{% multicode %}
```server-nodejs
const sdk = require('node-appwrite');

const client = new sdk.Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('<API_KEY>');

const tables = new sdk.Tables(client);

const result = await tables.deleteRows(
    '<DATABASE_ID>',
    '<TABLE_ID>',
    [] // Queries
);
```

```server-python
from appwrite.client import Client
from appwrite.services.databases import Databases

client = Client()
client.set_endpoint('https://<REGION>.cloud.appwrite.io/v1')
client.set_project('<PROJECT_ID>')
client.set_key('<API_KEY>')

tables = Tables(client)

result = tables.delete_rows(
    database_id = '<DATABASE_ID>',
    collection_id = '<TABLE_ID>',
    queries = []
)
```
{% /multicode %}

{% info title="Queries for deletion" %}

When deleting rows, you must specify queries to filter which rows to delete.
If no queries are provided, all rows in the table will be deleted.
[Learn more about queries](/docs/products/databases/queries).

{% /info %}